"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (_ref) {
  var component = _ref.component,
      containerId = _ref.containerId;

  return function (_PureComponent) {
    _inherits(Proxy, _PureComponent);

    function Proxy() {
      _classCallCheck(this, Proxy);

      return _possibleConstructorReturn(this, (Proxy.__proto__ || Object.getPrototypeOf(Proxy)).apply(this, arguments));
    }

    _createClass(Proxy, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        if (cache.indexOf(containerId) === -1) {
          var body = document.querySelector("body");
          var container = document.createElement("div");
          container.id = containerId;
          body.appendChild(container);
          (0, _reactDom.render)(_react2.default.createElement(_ProxyContainer2.default, null), document.getElementById(containerId));
          cache.push(containerId);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.attachToProxy(this.props);
      }

      // Maybe I need to shallow compare props

    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        this.attachToProxy(nextProps);
      }
    }, {
      key: "attachToProxy",
      value: function attachToProxy(props) {
        var C = component;
        _eventManager2.default.emit('PROXY_RENDER', _defineProperty({}, props.id, _react2.default.createElement(C, _extends({}, props, { key: props.id }))));
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);

    return Proxy;
  }(_react.PureComponent);
};

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _ProxyContainer = require("./ProxyContainer");

var _ProxyContainer2 = _interopRequireDefault(_ProxyContainer);

var _eventManager = require("./../util/eventManager");

var _eventManager2 = _interopRequireDefault(_eventManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
bstract the component
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var cache = [];